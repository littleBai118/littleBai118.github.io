const t=JSON.parse('{"key":"v-a5df8a42","path":"/%E8%B5%84%E6%96%99%E5%BA%93/JMM.html","title":"JMM——Java内存模型","lang":"zh-CN","frontmatter":{"title":"JMM——Java内存模型","date":"2023-05-15T08:30:43.000Z","category":["资料"],"tag":["JMM"],"description":"JMM——Java内存模型 Java内存模型，JMM即 Java Memory Model，它定义了主存（所有线程都共享的数据）和工作内存（线程私有的数据）的抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。JMM主要是为了屏蔽系统和硬件的差异。 JMM体现在以下几个方面 原子性-保证指令不会受到线程上下文切换的影响 可见性-保证指令不会受cpu缓存的影响 有序性-保证指令不会受cpu指令并行优化的影响","head":[["meta",{"property":"og:url","content":"https://littlebai118.github.io/%E8%B5%84%E6%96%99%E5%BA%93/JMM.html"}],["meta",{"property":"og:site_name","content":"白先生"}],["meta",{"property":"og:title","content":"JMM——Java内存模型"}],["meta",{"property":"og:description","content":"JMM——Java内存模型 Java内存模型，JMM即 Java Memory Model，它定义了主存（所有线程都共享的数据）和工作内存（线程私有的数据）的抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。JMM主要是为了屏蔽系统和硬件的差异。 JMM体现在以下几个方面 原子性-保证指令不会受到线程上下文切换的影响 可见性-保证指令不会受cpu缓存的影响 有序性-保证指令不会受cpu指令并行优化的影响"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://littlebai118.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T00:31:41.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JMM——Java内存模型"}],["meta",{"property":"article:tag","content":"JMM"}],["meta",{"property":"article:published_time","content":"2023-05-15T08:30:43.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-15T00:31:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMM——Java内存模型\\",\\"image\\":[\\"https://littlebai118.github.io/\\"],\\"datePublished\\":\\"2023-05-15T08:30:43.000Z\\",\\"dateModified\\":\\"2023-05-15T00:31:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":3,"title":"有序性","slug":"有序性","link":"#有序性","children":[]},{"level":2,"title":"Volatile","slug":"volatile","link":"#volatile","children":[{"level":3,"title":"Volatile原理","slug":"volatile原理","link":"#volatile原理","children":[]}]}],"git":{"createdTime":1684110701000,"updatedTime":1684110701000,"contributors":[{"name":"baixuanyu","email":"baixy118@163.com","commits":1}]},"readingTime":{"minutes":2.32,"words":695},"filePathRelative":"资料库/JMM.md","localizedDate":"2023年5月15日","excerpt":"<h1> JMM——Java内存模型</h1>\\n<p>Java内存模型，JMM即 Java Memory Model，它定义了主存（所有线程都共享的数据）和工作内存（线程私有的数据）的抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。JMM主要是为了屏蔽系统和硬件的差异。</p>\\n<p>JMM体现在以下几个方面</p>\\n<ul>\\n<li>原子性-保证指令不会受到线程上下文切换的影响</li>\\n<li>可见性-保证指令不会受cpu缓存的影响</li>\\n<li>有序性-保证指令不会受cpu指令并行优化的影响</li>\\n</ul>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{t as data};
