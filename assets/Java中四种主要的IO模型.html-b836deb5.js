const t=JSON.parse('{"key":"v-7927f349","path":"/%E8%B5%84%E6%96%99%E5%BA%93/Java%E4%B8%AD%E5%9B%9B%E7%A7%8D%E4%B8%BB%E8%A6%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B.html","title":"Java中四种主要的I/O模型","lang":"zh-CN","frontmatter":{"title":"Java中四种主要的I/O模型","date":"2023-05-15T00:14:17.000Z","category":["资料"],"tag":["I/O模型"],"description":"Java中四种主要的I/O模型 同步阻塞I/O（BIO） 在linux中的Java进程中，默认情况下所有的socket都是blocking IO。在阻塞式 I/O 模型中，应用程序在从IO系统调用开始，一直到到系统调用返回，这段时间是阻塞的。返回成功后，应用进程开始处理用户空间的缓存数据。 同步非阻塞I/O（NIO） 在Linux系统下，可以通过设置Socket使其变为Non-blocking。NIO 模型中应用程序在一旦开始IO系统调用，会出现以下两种情况：","head":[["meta",{"property":"og:url","content":"https://littlebai118.github.io/%E8%B5%84%E6%96%99%E5%BA%93/Java%E4%B8%AD%E5%9B%9B%E7%A7%8D%E4%B8%BB%E8%A6%81%E7%9A%84IO%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"白先生"}],["meta",{"property":"og:title","content":"Java中四种主要的I/O模型"}],["meta",{"property":"og:description","content":"Java中四种主要的I/O模型 同步阻塞I/O（BIO） 在linux中的Java进程中，默认情况下所有的socket都是blocking IO。在阻塞式 I/O 模型中，应用程序在从IO系统调用开始，一直到到系统调用返回，这段时间是阻塞的。返回成功后，应用进程开始处理用户空间的缓存数据。 同步非阻塞I/O（NIO） 在Linux系统下，可以通过设置Socket使其变为Non-blocking。NIO 模型中应用程序在一旦开始IO系统调用，会出现以下两种情况："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://littlebai118.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-14T16:15:26.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java中四种主要的I/O模型"}],["meta",{"property":"article:tag","content":"I/O模型"}],["meta",{"property":"article:published_time","content":"2023-05-15T00:14:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-14T16:15:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中四种主要的I/O模型\\",\\"image\\":[\\"https://littlebai118.github.io/\\"],\\"datePublished\\":\\"2023-05-15T00:14:17.000Z\\",\\"dateModified\\":\\"2023-05-14T16:15:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"同步阻塞I/O（BIO）","slug":"同步阻塞i-o-bio","link":"#同步阻塞i-o-bio","children":[]},{"level":2,"title":"同步非阻塞I/O（NIO）","slug":"同步非阻塞i-o-nio","link":"#同步非阻塞i-o-nio","children":[]},{"level":2,"title":"I/O多路复用模型（NIO）","slug":"i-o多路复用模型-nio","link":"#i-o多路复用模型-nio","children":[{"level":3,"title":"Redis中的I/O多路复用模型图示","slug":"redis中的i-o多路复用模型图示","link":"#redis中的i-o多路复用模型图示","children":[]},{"level":3,"title":"Java 中的I/O多路复用模型","slug":"java-中的i-o多路复用模型","link":"#java-中的i-o多路复用模型","children":[]}]},{"level":2,"title":"异步I/O模型（AIO）","slug":"异步i-o模型-aio","link":"#异步i-o模型-aio","children":[]}],"git":{"createdTime":1684080926000,"updatedTime":1684080926000,"contributors":[{"name":"baixuanyu","email":"baixy118@163.com","commits":1}]},"readingTime":{"minutes":2.91,"words":873},"filePathRelative":"资料库/Java中四种主要的IO模型.md","localizedDate":"2023年5月15日","excerpt":"<h1> Java中四种主要的I/O模型</h1>\\n<h2> 同步阻塞I/O（BIO）</h2>\\n<p>在linux中的Java进程中，默认情况下所有的socket都是blocking IO。在阻塞式 I/O 模型中，应用程序在从IO系统调用开始，一直到到系统调用返回，这段时间是阻塞的。返回成功后，应用进程开始处理用户空间的缓存数据。</p>\\n<figure><figcaption></figcaption></figure>\\n<h2> 同步非阻塞I/O（NIO）</h2>\\n<p>在Linux系统下，可以通过设置Socket使其变为Non-blocking。NIO 模型中应用程序在一旦开始IO系统调用，会出现以下两种情况：</p>","autoDesc":true}');export{t as data};
